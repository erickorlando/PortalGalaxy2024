@page "/categorias/list"
@using PortalGalaxy.Client.Xls
@inject ICategoriaProxy CategoriaProxy
@inject IToastService ToastService
@inject SweetAlertService Swal
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject HttpClient HttpClient

<PageTitle>Categorias</PageTitle>

<ListaGenerica TItem="CategoriaDtoResponse" Lista="Categorias" Titulo="Lista de Categorias" BotonNuevo="CrearCategoria">
    <Cabeceras>
        <th class="table-primary text-center">Id</th>
        <th class="table-primary text-center">Nombre</th>
        <th class="table-primary text-center">Descripcion</th>
        <th class="table-primary text-center">Acciones</th>
    </Cabeceras>
    <Detalles>
        <td>@context.Id</td>
        <td>@context.Nombre</td>
        <td>@context.Descripcion</td>
        <td>
            <BotonesAccion TItem="CategoriaDtoResponse" 
                           Item="context"
                           BotonEditar="Editar" BotonEliminar="Eliminar" />
        </td>
    </Detalles>
</ListaGenerica>

<div class="row justify-content-end">
    <div class="col-auto">
        <button class="btn btn-outline-success" @onclick="OnExportarExcel"><i class="bi bi-file-excel me-1"></i>Exportar</button>
    </div>
</div>

<LoadingComponent IsLoading="IsLoading" />

@code {

    public ICollection<CategoriaDtoResponse>? Categorias { get; set; }

    public bool IsLoading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            IsLoading = true;

            Categorias = await CategoriaProxy.ListAsync();

        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void CrearCategoria()
    {
        NavigationManager.NavigateTo("/categorias/nuevo");
    }

    private void Editar(CategoriaDtoResponse entidad)
    {
        NavigationManager.NavigateTo($"/categorias/editar/{entidad.Id}");
    }

    private async Task Eliminar(CategoriaDtoResponse entidad)
    {
        var result = await Swal.FireAsync(new SweetAlertOptions()
        {
            Title = "¿Desea eliminar este registro?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true
        });

        if (result.IsConfirmed)
        {
            await CategoriaProxy.DeleteAsync(entidad.Id);
            await OnInitializedAsync();
        }
    }

    private async Task OnExportarExcel()
    {
        if (Categorias is null) return;

        try
        {
            IsLoading = true;
            var plantilla = await HttpClient.GetStreamAsync("assets/xls/CategoriaTemplate.xlsx");

            var excel = new PlantillaXls();
            var bytes = excel.GenerarPlantilla(plantilla, Categorias, nameof(Categorias));

            await JsRuntime.InvokeVoidAsync("descargarArchivo", "categorias.xlsx", bytes, "application/octet-stream");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            ToastService.ShowError(ex.Message);
        }
        finally
        {
            IsLoading = false;
        }
    }
}
